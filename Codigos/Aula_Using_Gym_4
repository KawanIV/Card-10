# importando bibliotecas
import gym
import random
from IPython.display import clear_output
from time import sleep
import numpy as np

# Patch de compatibilidade para versões novas do NumPy
if not hasattr(np, "bool8"):
    np.bool8 = np.bool_  # cria um alias com o nome antigo

random.seed(1234)

# Ambiente para treinamento (modo ansi)
streets_train = gym.make("Taxi-v3", render_mode="ansi")
state, info = streets_train.reset(seed=1234)

# Configuração do estado inicial
initial_state = streets_train.unwrapped.encode(2, 3, 2, 0)
streets_train.unwrapped.s = initial_state

# Q-learning
q_table = np.zeros([streets_train.observation_space.n, streets_train.action_space.n])
learning_rate = 0.1
discount_factor = 0.6
exploration = 0.1
epochs = 10000

for taxi_run in range(epochs):
    state, _ = streets_train.reset()
    done = False
    while not done:
        if random.random() < exploration:
            action = streets_train.action_space.sample()
        else:
            action = int(np.argmax(q_table[state]))

        next_state, reward, terminated, truncated, info = streets_train.step(action)
        done = terminated or truncated

        prev_q = q_table[state, action]
        next_max_q = np.max(q_table[next_state])
        q_table[state, action] = (1 - learning_rate) * prev_q + learning_rate * (reward + discount_factor * next_max_q)

        state = next_state

# Cria novo ambiente para visualização humana
streets_human = gym.make("Taxi-v3", render_mode="human")

# Execução da política aprendida no modo humano
for tripnum in range(1, 11):
    state, _ = streets_human.reset()
    done = False
    step_count = 0
    max_steps = 20  # limite de passos para evitar loop infinito
    while not done and step_count < max_steps:
        action = int(np.argmax(q_table[state]))
        next_state, reward, terminated, truncated, info = streets_human.step(action)
        done = terminated or truncated

        clear_output(wait=True)
        print(f"Trip number {tripnum}")
        sleep(0.5)
        state = next_state
        step_count += 1

    sleep(1.5)
    

# Fecha o ambiente de renderização humana
streets_human.close()
